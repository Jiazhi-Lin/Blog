(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{58:function(t,e,n){"use strict";n.r(e);var r=n(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("h3",{attrs:{id:"vue-scroll-helper"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-scroll-helper","aria-hidden":"true"}},[t._v("#")]),t._v(" vue-scroll-helper")]),n("blockquote",[n("p",[t._v("一个基于 vue 的滚动组件")])]),n("p",[n("em",[t._v("WHY：写这个组件是在写一个无限滚动的列表，使用过其他组件感觉不够灵活，整老半天用起来还不是很方便。所以在react项目写完之后，觉得可以自己封一个更加完美的。其实类似的轮子网上有的是，但是还是觉得可以在造一个，并不是因为闲的发慌，是觉得这样可以锻炼自己考虑作为一个组件的全面性，怎么设置属性可以更好的适应各种场景啥的，一直都是在使用别人的组件，是时候自己动手弄一弄了。自己造轮子还可以根据自己的需要进行定制，多爽")]),t._v(" ƪ(‾ε‾“)ʃƪ(")]),n("h4",{attrs:{id:"例子走起"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子走起","aria-hidden":"true"}},[t._v("#")]),t._v(" 例子"),n("a",{attrs:{href:"https://kxd-test.yy.com/a/interfaces-201805-feat-mob/scrollHelper.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("走起")])]),n("p",[n("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1534680729467.png",alt:""}})]),n("h4",{attrs:{id:"安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[t._v("#")]),t._v(" 安装")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("npm install vue-scroll-helper --save\nyarn add vue-scroll-helper --save\n\n")])]),n("h4",{attrs:{id:"参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参数","aria-hidden":"true"}},[t._v("#")]),t._v(" 参数")]),n("table",[n("thead",[n("tr",[n("th",[t._v("props")]),n("th",[t._v("含义")]),n("th",[t._v("类型")]),n("th",[t._v("值")])])]),n("tbody",[n("tr",[n("td",[t._v("mod")]),n("td",[t._v("使用无限滚动模式还是点击加载更多的模式")]),n("td",[t._v("String")]),n("td",[t._v("auto【默认】、manual【需要点击才会加载】")])]),n("tr",[n("td",[t._v("limit")]),n("td",[t._v("最多翻到的页数")]),n("td",[t._v("Number")]),n("td",[t._v("0【默认无限滚动】")])]),n("tr",[n("td",[t._v("pageStart")]),n("td",[t._v("滚动的起始页")]),n("td",[t._v("Number")]),n("td",[t._v("0【默认从0开始计数】")])]),n("tr",[n("td",[t._v("threshold")]),n("td",[t._v("到达哪个阈值触发下一页")]),n("td",[t._v("Number")]),n("td",[t._v("250【页面底部到显示容器的距离】")])]),n("tr",[n("td",[t._v("isOver")]),n("td",[t._v("是不是加载完了")]),n("td",[t._v("Boolean")]),n("td",[t._v("false")])]),n("tr",[n("td",[t._v("isAutoLoad")]),n("td",[t._v("设置组件加载完成自动完成第一页的加载显示")]),n("td",[t._v("Boolean")]),n("td",[t._v("false")])]),n("tr",[n("td",[t._v("isInWindow")]),n("td",[t._v("是不是以window作为显示容器，此时显示页面为html")]),n("td",[t._v("Boolean")]),n("td",[t._v("false")])]),n("tr",[n("td",[t._v("onLoadNextFn")]),n("td",[t._v("触发加载下一页的回调函数【设置了pageStart 的话，此时的回调返回 pageStart+1 】")]),n("td",[t._v("Function")]),n("td",[t._v("必设【回调参数返回下一页页码】")])]),n("tr",[n("td",[t._v("wrapStyle")]),n("td",[t._v("显示容器的样式")]),n("td",[t._v("Object")]),n("td",[t._v("{}")])]),n("tr",[n("td",[t._v("wrapClass")]),n("td",[t._v("显示容器的样式")]),n("td",[t._v("Object/String")]),n("td",[t._v("''")])]),n("tr",[n("td",[t._v("list")]),n("td",[t._v("你的 v-for 列表")]),n("td",[t._v("slot")]),n("td",[t._v("必设")])]),n("tr",[n("td",[t._v("loading")]),n("td",[t._v("自定义显示的加载的样式")]),n("td",[t._v("slot")]),n("td",[t._v("Loading...")])]),n("tr",[n("td",[t._v("loadMore")]),n("td",[t._v("自定义点击加载更多的样式")]),n("td",[t._v("slot")]),n("td",[t._v("Click To Load More")])]),n("tr",[n("td",[t._v("noMore")]),n("td",[t._v("自定义没有更多的样式")]),n("td",[t._v("slot")]),n("td",[t._v("No More")])])])]),n("h4",{attrs:{id:"简约"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简约","aria-hidden":"true"}},[t._v("#")]),t._v(" 简约")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <div id="app">\n    <vueScrollHelper\n      :isOver="isOver"\n      wrapClass="youclass"\n      :onLoadNextFn="onLoadNextFn">\n      <template slot="list">\n        <div v-for="(v, i) in client" :key="i" class="item">\n          {{v}}\n        </div>\n      </template>\n      <template slot="loading">\n        <div style="width:100%;text-align:center">加载中</div>\n      </template>\n      <template slot="loadMore">\n        <div style="width:100%;text-align:center">点击加载更多</div>\n      </template>\n      <template slot="noMore">\n        <div style="width:100%;text-align:center">我是有底线的</div>\n      </template>\n    </vueScrollHelper>\n  </div>\n</template>\n\n<script>\nimport vueScrollHelper from \'@/component/vue-scroll-helper\'\n\nexport default {\n  name: \'app\',\n  data () {\n    return {\n      client: [],\n      count: 10,\n      logMsgs: \'\',\n      isOver: true\n    }\n  },\n  components: {\n    vueScrollHelper\n  },\n  created () {\n  },\n  watch: {\n  },\n  mounted () {\n  },\n  methods: {\n    async onLoadNextFn (page) {\n      console.log(\'加载下一页\', page)\n      var data = []\n      for (var i = 0, j = 10; i < j; i++) {\n        data.push(this.count++);\n      }\n      await new Promise(function (fulfill) {\n        setTimeout(fulfill, 2000)\n      })\n      if (this.client.length >= 40) {\n        this.isOver = false\n      } else {\n        this.client = this.client.concat(data)\n      }\n    }\n  }\n}\n<\/script>\n\n<style lang="scss">\n\n</style>\n\n')])]),n("h4",{attrs:{id:"使用姿势"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用姿势","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用姿势")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <div id="app">\n    <vueScrollHelper\n      mod="auto"\n      :wrapStyle="{height:\'500px\', border: \'1px solid red\'}"\n      :isOver="isOver"\n      wrapClass="bg"\n      :onLoadNextFn="onLoadNextFn"\n      :isAutoLoad="true"\n      :limit="0"\n      :threshold="250"\n      :isInWindow="false"\n      :pageStart="0">\n      <template slot="list">\n        <div v-for="(v, i) in client" :key="i" class="item">\n          {{v}}\n        </div>\n      </template>\n      <template slot="loading">\n        <div style="width:100%;text-align:center">加载中</div>\n      </template>\n      <template slot="loadMore">\n        <div style="width:100%;text-align:center">点击加载更多</div>\n      </template>\n      <template slot="noMore">\n        <div style="width:100%;text-align:center">我是有底线的</div>\n      </template>\n    </vueScrollHelper>\n  </div>\n</template>\n\n<script>\nimport vueScrollHelper from \'@/component/vue-scroll-helper\'\n\nexport default {\n  name: \'app\',\n  data () {\n    return {\n      client: [0,1,2,3,4,5,6,7,8,9],\n      count: 10,\n      logMsgs: \'\',\n      isOver: true\n    }\n  },\n  components: {\n    vueScrollHelper\n  },\n  created () {\n  },\n  watch: {\n  },\n  mounted () {\n  },\n  methods: {\n    async onLoadNextFn (page) {\n      console.log(\'加载下一页\', page)\n      var data = []\n      for (var i = 0, j = 10; i < j; i++) {\n        data.push(this.count++);\n      }\n      await new Promise(function (fulfill) {\n        setTimeout(fulfill, 2000)\n      })\n      if (this.client.length >= 40) {\n        this.isOver = false\n      } else {\n        this.client = this.client.concat(data)\n      }\n    }\n  }\n}\n<\/script>\n\n<style lang="scss">\nhtml,body {\n  border: 0;\n  margin: 0;\n  padding: 0;\n}\n\n.bg {\n  background: pink;\n}\n\n.item {\n  width: 100%;\n  height: 100px;\n  border: 1px solid #bbb;\n  margin-bottom: 10px;\n}\n\n</style>\n\n')])]),n("h4",{attrs:{id:"检测原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#检测原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 检测原理")]),n("p",[n("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1534673858922.png",alt:""}})]),n("h4",{attrs:{id:"优点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优点","aria-hidden":"true"}},[t._v("#")]),t._v(" 优点")]),n("p",[t._v("1、支持直接滚动到底部加载和滚动到底部出现按钮点击加载")]),n("p",[t._v("2、使用 vue-scroll-helper 不需要自己在组件中控制 loading 的显示，vue-scroll-helper 已经自己实现检测 slot=list 的节点变化，不会重复触发设置的加载下一页的回调函数")]),n("p",[t._v("3、更加丰富的设置项")]),n("h4",{attrs:{id:"不足"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不足","aria-hidden":"true"}},[t._v("#")]),t._v(" 不足")]),n("ul",[n("li",[t._v("觉得在检测 slot = list 这个的变化上，我用的是 "),n("a",{attrs:{href:"https://caniuse.com/#search=MutationObserver",target:"_blank",rel:"noopener noreferrer"}},[t._v("MutationObserver")]),t._v(" 检测节点变化 ，似乎兼容性一般，这个后面再看。")])]),n("h4",{attrs:{id:"对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对比","aria-hidden":"true"}},[t._v("#")]),t._v(" 对比")]),n("p",[n("em",[t._v("没有对比，那写这个组件有什么说服力，拿组内一直在使用的 vue-infinite-scroll 来互相伤害，从别人的源码还是看到一些有意思的实现，文末有总结")])]),n("p",[t._v("1、实现姿势")]),n("table",[n("thead",[n("tr",[n("th",[t._v("vue-scroll-helper")]),n("th",[t._v("vue-infinite-scroll")])])]),n("tbody",[n("tr",[n("td",[t._v("使用组件加载的形式，直接import到项目")]),n("td",[t._v("使用 Vue.directive 的方式处理")])])])]),n("p",[t._v("2、检测到达阈值的实现")]),n("p",[t._v("基本的实现方式没大差别，只是获取滚动元素上看到了一段有意思的代码")]),n("ul",[n("li",[t._v("拿到容器后 vue-infinite-scroll 这样去获取节点")])]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var getScrollEventTarget = function (element) {\n  var currentNode = element;\n  // bugfix, see http://w3help.org/zh-cn/causes/SD9013 and http://stackoverflow.com/questions/17016740/onscroll-function-is-not-working-for-chrome\n  while (currentNode && currentNode.tagName !== 'HTML' && currentNode.tagName !== 'BODY' && currentNode.nodeType === 1) {\n    var overflowY = getComputedStyle(currentNode).overflowY;\n    if (overflowY === 'scroll' || overflowY === 'auto') {\n      return currentNode;\n    }\n    currentNode = currentNode.parentNode;\n  }\n  return window;\n}\n")])]),n("ul",[n("li",[t._v("拿到容器后 vue-scroll-helper 这样去获取节点")])]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 因为我是直接把容器放在我的组件里面的，组件有个属性 ref="wrap"\nvar getScrollEventTarget = this.$refs.wrap\n\n')])]),n("p",[t._v("3、功能区别")]),n("table",[n("thead",[n("tr",[n("th",[t._v("vue-scroll-helper")]),n("th",[t._v("vue-infinite-scroll")])])]),n("tbody",[n("tr",[n("td",[t._v("支持使用window作为容器层")]),n("td",[t._v("从文档和源码看起来似乎不支持，有不同看法的可以来diss我")])]),n("tr",[n("td",[t._v("不需要控制loading的状态")]),n("td",[t._v("需要控制loading的状态，列表没了页需要手动添加控制nomore的显示")])])])]),n("p",[t._v("4、代码上\n发现人家代码里面设置变量有 var 和 const 交叉使用，强迫症看起来很难受")]),n("p",[t._v("。。。")]),n("h4",{attrs:{id:"思考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#思考","aria-hidden":"true"}},[t._v("#")]),t._v(" 思考")]),n("ul",[n("li",[t._v("在指令里面监听组件的姿势")])]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("  // bind是directive的钩子 https://cn.vuejs.org/v2/guide/custom-directive.html\n  bind(el, binding, vnode) {\n    el[ctx] = {\n      el,\n      vm: vnode.context,\n      expression: binding.value\n    };\n    const args = arguments;\n    console.log(el['@@oIo'], binding, vnode)\n    ** 就是这里，我不截出去了 **\n    el[ctx].vm.$on('hook:mounted', function () {\n      el[ctx].vm.$nextTick(function () {\n        // 判断元素是不是已经挂载\n        if (isAttached(el)) {\n          doBind.call(el[ctx], args);\n        }\n        el[ctx].bindTryCount = 0;\n        var tryBind = function () {\n          if (el[ctx].bindTryCount > 10) return; //eslint-disable-line\n          el[ctx].bindTryCount++;\n          if (isAttached(el)) {\n            doBind.call(el[ctx], args);\n          } else {\n            setTimeout(tryBind, 50);\n          }\n        };\n        tryBind();\n      });\n    });\n  },\n")])]),n("p",[t._v("2、在组件加载的时候看看有没有 vue 这个对象，有的话直接 install")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const install = function(Vue) {\n  Vue.directive('InfiniteScroll', InfiniteScroll);\n};\n\nif (window.Vue) {\n  ** 这里有个问题，为什么要挂载window对象上面 **\n  window.infiniteScroll = InfiniteScroll;\n  Vue.use(install); // eslint-disable-line\n}\n\nInfiniteScroll.install = install;\n")])])])}],!1,null,null,null);e.default=a.exports}}]);