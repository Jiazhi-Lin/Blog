(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{64:function(e,t,a){"use strict";a.r(t);var o=a(0),r=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"post-和-get的那些事"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-和-get的那些事","aria-hidden":"true"}},[e._v("#")]),e._v(" post 和 get的那些事")]),a("h3",{attrs:{id:"get-和-post-的小区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的小区别","aria-hidden":"true"}},[e._v("#")]),e._v(" get 和 post 的小区别")]),a("ul",[a("li",[e._v("GET在浏览器回退时是无害的，而POST会再次提交请求。")]),a("li",[e._v("GET产生的URL地址可以被Bookmark，而POST不可以。")]),a("li",[e._v("GET请求会被浏览器主动cache，而POST不会，除非手动设置。")]),a("li",[e._v("GET请求只能进行url编码，而POST支持多种编码方式。")]),a("li",[e._v("GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。")]),a("li",[e._v("GET请求在URL中传送的参数是有长度限制的，而POST么有。")]),a("li",[e._v("对参数的数据类型，GET只接受ASCII字符，而POST没有限制。")]),a("li",[e._v("GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。")]),a("li",[e._v("GET参数通过URL传递，POST放在Request body中。")]),a("li",[e._v("GET产生一个TCP数据包；POST产生两个TCP数据包。\n对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；\n而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。")])]),a("h4",{attrs:{id:"get-请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-请求","aria-hidden":"true"}},[e._v("#")]),e._v(" get 请求")]),a("p",[e._v("众所周知，get请求就是将参数 "),a("code",[e._v("json2query")]),e._v(" 一遍，然后带在 "),a("code",[e._v("url")]),e._v(" 后面发送就完事了")]),a("h4",{attrs:{id:"post-请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-请求","aria-hidden":"true"}},[e._v("#")]),e._v(" post 请求")]),a("blockquote",[a("p",[e._v("post请求会根据设置的 "),a("code",[e._v("content-type")]),e._v(" 的不同而不同")])]),a("p",[e._v("1、"),a("code",[e._v('"Content-Type": "application/json; charset=utf-8"')])]),a("p",[e._v("我们携带的参数会在我们的网络请求的 "),a("code",[e._v("Request Payload")]),e._v(' 中看到，参数格式为JSON格式：{"key":"value","key":"value"...}')]),a("ul",[a("li",[a("p",[e._v("使用 "),a("code",[e._v("fetch")]),e._v(" 进行 "),a("code",[e._v("ajax")]),e._v(" 请求的前端代码和后端代码")]),a("ul",[a("li",[e._v("前端")])]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function _fetch (path) {\n  let url = `//test.kk.com:12306${path}`\n  fetch(url, {\n    method: "POST", // *GET, POST, PUT, DELETE, etc.\n    mode: "cors", // no-cors, cors, *same-origin\n    headers: {\n      "Content-Type": "application/json; charset=utf-8"\n    },\n    body: JSON.stringify({ ley: 123 }), // body data type must match "Content-Type" header\n  })\n  .then(response => { console.log(\'re\', response) }); // parses response to JSON\n}\n')])]),a("p",[a("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1536843718200.png",alt:"image"}})]),a("ul",[a("li",[e._v("后端 "),a("code",[e._v("koa")]),e._v(" 代码， 因为用了中间件 所以不用自己手动处理，后端 getRequestPayload")])]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("router.post(`/npc/getUris`, (ctx, next) => {\n  console.log('resquest body', ctx.request.body || 'no body')\n  console.warn(JSON.stringify(ctx, null, 2))\n  ctx.body = {\n    code: 1,\n    data: 123\n  }\n})\n")])]),a("p",[a("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1536843900603.png",alt:"image"}})])])]),a("p",[e._v("2、"),a("code",[e._v('"Content-Type": "application/x-www-form-urlencoded"')])]),a("p",[e._v("这种请求是 ajax 默认的 post 请求方式，我们携带的参数会在我们的网络请求的 "),a("code",[e._v("Form Data")]),e._v(" 中看到，参数格式为String格式：key=value&key=value&key=value...，这种方式后端拿到了要先解一次码。")]),a("ul",[a("li",[a("p",[e._v("使用 "),a("code",[e._v("fetch")]),e._v(" 进行 "),a("code",[e._v("ajax")]),e._v(" 请求的前端代码和后端代码")]),a("ul",[a("li",[e._v("前端")])]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function _fetch (path) {\n  let url = `//test.kk.com:12306${path}`\n  fetch(url, {\n    method: "POST", // *GET, POST, PUT, DELETE, etc.\n    mode: "cors", // no-cors, cors, *same-origin\n    headers: {\n      "Content-Type": "application/x-www-form-urlencoded"\n    },\n    body: \'ley=123\', // body data type must match "Content-Type" header\n  })\n  .then(response => { console.log(\'re\', response) }); // parses response to JSON\n}\n')])]),a("p",[a("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1536845422835.png",alt:"image"}})]),a("ul",[a("li",[e._v("后端 "),a("code",[e._v("koa")]),e._v(" 代码， 因为用了中间件 所以不用自己手动处理，java 后端 getParameters 方式获取，在 tomcat 的 requset.getParameters 里，对于 application/x-www-form-urlencoded 有做一层判断，对这种编码回去解析body里面的数据，填充到parameters 里，后续想通过流的方式读取 body 是读取不到的")])]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const bodyparser = Bodyparser()\napp.use(convert(bodyparser))\nrouter.post(`/npc/getUris`, (ctx, next) => {\n  console.log('resquest body', ctx.request.body || 'no body')\n  console.warn(JSON.stringify(ctx, null, 2))\n  ctx.body = {\n    code: 1,\n    data: 123\n  }\n})\n")])]),a("p",[a("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1536846203992.png",alt:"image"}})])]),a("li",[a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",target:"_blank",rel:"noopener noreferrer"}},[e._v("fetch的使用姿势")])])]),a("li",[a("p",[a("a",{attrs:{href:"https://github.com/alexmingoia/koa-router",target:"_blank",rel:"noopener noreferrer"}},[e._v("koa-router")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://www.cnblogs.com/btgyoyo/p/6141480.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTTP请求中的form data和request payload的区别")])])])])])}],!1,null,null,null);t.default=r.exports}}]);