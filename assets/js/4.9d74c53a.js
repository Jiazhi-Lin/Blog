(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{62:function(n,e,t){"use strict";t.r(e);var a=t(0),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content"},[t("h2",{attrs:{id:"修饰模式-decortaor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰模式-decortaor","aria-hidden":"true"}},[n._v("#")]),n._v(" 修饰模式(Decortaor)")]),t("p",[n._v("是面向对象编程领域中，一种动态地往一个类中添加新的行为的设计模式。就功能而言，修饰模式相比生成子类更为灵活，这样可以给某个对象而不是整个类添加一些功能。")]),t("p",[n._v("通过使用修饰模式，可以在运行时扩充一个类的功能。原理是：增加一个修饰类包裹原来的类，包裹的方式一般是通过在将原来的对象作为修饰类的构造函数的参数。装饰类实现新的功能，但是，在不需要用到新功能的地方，它可以直接调用原来的类中的方法。修饰类必须和原来的类有相同的接口。")]),t("p",[n._v("修饰模式是类继承的另外一种选择。类继承在编译时候增加行为，而装饰模式是在运行时增加行为。")]),t("p",[n._v("当有几个相互独立的功能需要扩充时，这个区别就变得很重要。在有些>面向对象的编程语言中，类不能在运行时被创建，通常在设计的时候也不能预测到有哪几种功能组合。这就意味著要为每一种组合创建一个新类。相反，修饰模式是面向运行时候的对象实例的,这样就可以在运行时根据需要进行组合。")]),t("p",[n._v("一个修饰模式的示例是JAVA里的Java I/O Streams的实现。")]),t("h4",{attrs:{id:"修饰类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰类","aria-hidden":"true"}},[n._v("#")]),n._v(" 修饰类")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function testable(isTestable) {\n  return function(target) {\n    // 为类添加一个静态属性\n    target.isTestable = isTestable;\n    // 为类添加一个实例属性\n    target.prototype.isTestable = true;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// mixins.js\nexport function mixins(...list) {\n  return function (target) {\n    Object.assign(target.prototype, ...list)\n  }\n}\n\n// main.js\n\nimport { mixins } from './mixins'\n\nconst Foo = {\n  foo() { console.log('foo') }\n};\n\n@mixins(Foo)\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo() // 'foo'\n")])]),t("h4",{attrs:{id:"修饰类属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰类属性","aria-hidden":"true"}},[n._v("#")]),n._v(" 修饰类属性")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function readonly(target, name, descriptor){\n  // descriptor对象原来的值如下\n  // {\n  //   value: specifiedFunction,\n  //   enumerable: false,\n  //   configurable: true,\n  //   writable: true\n  // };\n  descriptor.writable = false;\n  return descriptor;\n}\nfunction log(target, name, descriptor) {\n  var oldValue = descriptor.value;\n\n  descriptor.value = function() {\n    console.log(`Calling ${name} with`, arguments);\n    return oldValue.apply(this, arguments);\n  };\n\n  return descriptor;\n}\n\nclass Person {\n  @readonly\n  name() { return `${this.first} ${this.last}` }\n\n  @log\n  add(a, b) {\n    return a + b;\n  }\n}\n")])]),t("blockquote",[t("p",[n._v("如果同一个方法有多个装饰器，会像剥洋葱一样，先从外到内进入，然后由内向外执行。")])])])}],!1,null,null,null);e.default=s.exports}}]);