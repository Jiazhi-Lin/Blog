(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{60:function(e,r,t){"use strict";t.r(r);var n=t(0),a=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("div",{staticClass:"content"},[t("h2",{attrs:{id:"docker-心路历程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-心路历程","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 心路历程")]),t("h3",{attrs:{id:"软件开发痛点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#软件开发痛点","aria-hidden":"true"}},[e._v("#")]),e._v(" 软件开发痛点")]),t("p",[e._v("环境的配置，例如 python 有 2 和 3 有些语法还不兼容，在把代码给交付的时候，需要跟对方说好依赖的版本和库，在部署的也要在机器先配置好一样的环境")]),t("h3",{attrs:{id:"什么是-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-docker","aria-hidden":"true"}},[e._v("#")]),e._v(" 什么是 docker")]),t("ol",[t("li",[e._v("Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。")]),t("li",[e._v("Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。")]),t("li",[e._v("Docker 的接口相对简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。")]),t("li",[e._v("docker 的原理就是 集装箱 原理，在理解 docker 操作的时候，想象成在一艘货轮操作一个个集装箱。")])]),t("h3",{attrs:{id:"docker-能干什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-能干什么","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 能干什么")]),t("ol",[t("li",[e._v("提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。")]),t("li",[e._v("提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。")]),t("li",[e._v("组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。")]),t("li",[e._v("应用的自动化打包、自动化测试和持续集成、发布。")]),t("li",[e._v("在服务型环境中部署和调整数据库或其他的后台应用。")])]),t("h3",{attrs:{id:"和虚拟机的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和虚拟机的区别","aria-hidden":"true"}},[e._v("#")]),e._v(" 和虚拟机的区别")]),t("p",[t("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1540443626789.png",alt:"image"}})]),t("h3",{attrs:{id:"docker-在-window-上的正确使用姿势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-在-window-上的正确使用姿势","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 在 window 上的正确使用姿势")]),t("ul",[t("li",[e._v("工具准备")])]),t("ol",[t("li",[e._v("virtualbox 【VirtualBox 是一款开源虚拟机软件，可以直观地看到当前系统有多少虚拟机】\n&& vagrant 【用于创建和部署虚拟化开发环境，这里主要用来安装 centos7 虚拟机到本地】")]),t("li",[e._v("docker-machine 【用于创建和管理 安装了docker 容器虚机的一个工具，用 docker-machine  创建的 docker 容器可以在 virtualBox 管理，主要是可以帮助我们在远程的机器上安装和管理 Docker】--- "),t("a",{attrs:{href:"https://docs.docker.com/machine/",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门")])])]),t("p",[t("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1540542725718.png",alt:"image"}})]),t("ul",[t("li",[t("p",[e._v("window 本地安装 docker 【满足想在 window 上跑 docker 的你】 "),t("a",{attrs:{href:"https://docs.docker.com/docker-for-windows/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("地址")])])]),t("li",[t("p",[e._v("安装本地虚拟机 centos7")]),t("blockquote",[t("p",[t("a",{attrs:{href:"https://www.virtualbox.org/wiki/Downloads",target:"_blank",rel:"noopener noreferrer"}},[e._v("下载 VirtualBox")]),e._v(" &&\n"),t("a",{attrs:{href:"https://www.vagrantup.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("下载 vagrant")])])]),t("ol",[t("li",[e._v("首先找一个目录用来专门放我们的虚拟机，在对应目录打开命令行工具")]),t("li",[e._v("创建 Vagrantfile 文件 vagrant init centos/7    ##tip：Vagrantfile 文件可以存储要创建的虚机的版本并且在虚拟机启动的时候执行后面的脚本")]),t("li",[e._v("安装 vagrant up")]),t("li",[e._v("进入机器 vagrant ssh 或者 在 virtualbox 里面打开")]),t("li",[e._v("登录虚机 name: root  psd: vagrant")]),t("li",[e._v("安装 docker "),t("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/centos/",target:"_blank",rel:"noopener noreferrer"}},[e._v("地址")])])])]),t("li",[t("p",[e._v("安装本地 docker-machine\n"),t("a",{attrs:{href:"https://docs.docker.com/machine/install-machine/",target:"_blank",rel:"noopener noreferrer"}},[e._v("地址")]),e._v("\n打开 gitbash 【这是在 window 上创建 docker 的另一种姿势】")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('base=https://github.com/docker/machine/releases/download/v0.14.0 &&\nmkdir -p "$HOME/bin" &&\ncurl -L $base/docker-machine-Windows-x86_64.exe > "$HOME/bin/docker-machine.exe" &&\nchmod +x "$HOME/bin/docker-machine.exe"\n')])]),t("p",[e._v("常用指令和"),t("a",{attrs:{href:"https://www.cnblogs.com/sparkdev/p/7044950.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("基本操作")])]),t("ol",[t("li",[e._v("docker-machine create demo 创建一台名称为 demo 的虚机 并且在里面安装好了 docker")]),t("li",[e._v("docker-machine env xxx  ---\x3e eval $(docker-machine env xxx) 远程管理 docker")]),t("li",[e._v("docker-mechine ls")]),t("li",[e._v("docker-mechine ssh demo")]),t("li",[e._v("exit")]),t("li",[e._v("docker-mechine stop")]),t("li",[e._v("docker-mechine start")])])])]),t("h3",{attrs:{id:"docker-基本介绍及架构分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-基本介绍及架构分析","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 基本介绍及架构分析")]),t("ul",[t("li",[e._v("docker 提供了一个开发，打包，运行的 app 环境")]),t("li",[e._v("把 app 和 底层的基础设施隔离开来\n"),t("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1539327952764.jpg",alt:"image"}})]),t("li",[e._v("docker 整体架构\n"),t("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1539328186819.jpg",alt:"image"}})])]),t("ol",[t("li",[e._v("用户是使用Docker Client与Docker Daemon建立通信，并发送请求给后者。")]),t("li",[e._v("Docker Daemon作为Docker架构中的主体部分，首先提供Server的功能使其可以接受Docker Client的请求；")]),t("li",[e._v("Engine执行Docker内部的一系列工作，每一项工作都是以一个Job的形式的存在。")]),t("li",[e._v("Job的运行过程中，当需要容器镜像时，则从Docker Registry中下载镜像，并通过镜像管理驱动graphdriver将下载镜像以Graph的形式存储；")]),t("li",[e._v("当需要为Docker创建网络环境时，通过网络管理驱动networkdriver创建并配置Docker容器网络环境；")]),t("li",[e._v("当需要限制Docker容器运行资源或执行用户指令等操作时，则通过execdriver来完成。")]),t("li",[e._v("libcontainer是一项独立的容器管理包，networkdriver以及execdriver都是通过libcontainer来实现具体对容器进行的操作。")])]),t("ul",[t("li",[e._v("docker 的几个关键指令如下：执行 docker build 的时候会根据 Dockerfile 创建一个集装箱，在集装箱里面可以指定集装箱的材质，在 build 的过程中，docker 会去 register 中取来这些材质，build 出来了一个集装箱的模子（image），在 run 的时候，docker 会根据这个 模子 创建一个真正的集装箱 container\n"),t("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1539337368447.png",alt:"image"}})])]),t("h3",{attrs:{id:"image-docker的模板"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#image-docker的模板","aria-hidden":"true"}},[e._v("#")]),e._v(" Image -- docker的模板")]),t("ul",[t("li",[t("p",[e._v("image 基本介绍 "),t("a",{attrs:{href:"https://segmentfault.com/a/1190000009309347",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门")]),t("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1539346942008.jpg",alt:"image"}})]),t("ul",[t("li",[e._v("文件和meta data的集合 （root filesystem）")]),t("li",[e._v("分层的结构，并且每一层都可以添加修改删除文件，成为一个新的image")]),t("li",[e._v("不同的 image 可以共享相同的 layer")]),t("li",[e._v("image 本身是只读的")])])])]),t("h4",{attrs:{id:"搭建一个最最简单的-docker-image"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搭建一个最最简单的-docker-image","aria-hidden":"true"}},[e._v("#")]),e._v(" 搭建一个最最简单的 docker image")]),t("ul",[t("li",[t("p",[e._v("准备工作")]),t("ul",[t("li",[e._v("yum install gcc [ 将 c 文件转换为可执行的二进制文件 ]")]),t("li",[e._v("yum install glibc-static [ 附加的工具 ]")])])]),t("li",[t("p",[e._v("指令顺序")]),t("ol",[t("li",[e._v("指定一个文件夹 mkdir hello")]),t("li",[e._v("在 hello 下创建一个文件 hello.c 的文件")]),t("li",[e._v("在文件编写简单的 c 代码")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#include<stdio.h>\nvoid mian(){\n  printf('hello');\n}\n")])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("使用指令 gcc -static hello.c -o hello 生成hello文件，通过 ./hello 可以看到我们文件的执行结果")]),t("li",[e._v("接下来创建一个 Dockerfile 文件，文件的内容")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('FORM scratch #空\nADD hello /\nCMD ["/jz"]\n')])]),t("ol",{attrs:{start:"6"}},[t("li",[e._v("启动 docker： systemctl start docker")]),t("li",[e._v("打包我们的 image: docker build -t jz/hello . 【这个点是基于当前目录的 Dockerfile build 的】")]),t("li",[e._v("查看 image：docker image ls")]),t("li",[e._v("创建container并让我们的image跑起来：docker run jz/hello")])])])]),t("h3",{attrs:{id:"container-docker的集装箱"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#container-docker的集装箱","aria-hidden":"true"}},[e._v("#")]),e._v(" Container -- docker的集装箱")]),t("p",[t("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1539347510597.png",alt:"image"}})]),t("ul",[t("li",[e._v("通过 Image 创建")]),t("li",[e._v("在 Image layer 之上建立一个 container layer 【可读写】")]),t("li",[e._v("Image 负责 app应用 的存储和分发，container 负责运行app")]),t("li",[e._v("就好像我们的类（image） 和 实例（container）")])]),t("h4",{attrs:{id:"基本指令介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本指令介绍","aria-hidden":"true"}},[e._v("#")]),e._v(" 基本指令介绍")]),t("ul",[t("li",[e._v("查看运行中 container：docker container ls === docker ps")]),t("li",[e._v("查看所有 container：docker container ls -a")]),t("li",[e._v("交互式地运行 image：docker run -it centos")]),t("li",[e._v("清除所有 container：docker rm $(docker container ls -aq)")]),t("li",[e._v('清除所有 exit 的 container：docker rm $(docker container ls -f "status-exited" -q)')]),t("li",[e._v("将在 container 做出的变化映射成一个新的image：docker container commit")]),t("li",[e._v("查看一个 image 的历史及资源： docker history imgId")])]),t("h3",{attrs:{id:"dockerfile-语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-语法","aria-hidden":"true"}},[e._v("#")]),e._v(" Dockerfile 语法")]),t("blockquote",[t("p",[e._v("通过关键字的定义")])]),t("ul",[t("li",[t("p",[e._v("FROM [在什么base image 进行制作image]")]),t("ul",[t("li",[e._v("FROM scratch (从头开始)")]),t("li",[e._v("FROM centos (以 centos 作为基本 image )")]),t("li",[e._v("最佳实践 以官方的 image 作为基本 image")])])]),t("li",[t("p",[e._v("LABEL [定义imgae的元信息]")]),t("ul",[t("li",[e._v('LABEL maintainer="xxxxx@gmail.com"')]),t("li",[e._v('LABEL version="1.0"')]),t("li",[e._v('LABEL descrtion="xxxxx"')])])]),t("li",[t("p",[e._v("RUN [运行命令并创建新的额 image layer]")]),t("ul",[t("li",[e._v("为了美观， 复杂的run使用反斜线换行，为了避免无用的分层，合并多条命令换成一行")]),t("li",[e._v("RUN yum uodate && yum install -y vim\\")])])]),t("li",[t("p",[e._v("WORKDIR [设定当前目录, 相当于 cd]")]),t("ul",[t("li",[e._v("不用使用 RUN 进行目录生成，WORKDIR 可以多条使用，尽量使用绝对路径")]),t("li",[e._v("WORKDIR /root")])])]),t("li",[t("p",[e._v("ADD & COPY")]),t("ul",[t("li",[e._v("顾名思义 COPY 就是复制 ADD 除了复制还有解压")]),t("li",[e._v("ADD hello /")]),t("li",[e._v("ADD test.tar.gz /")]),t("li",[e._v("WORKDIR /root   ADD hello ./test  ==> #/root/test/hello")]),t("li",[e._v("COPY 优先于 ADD 添加远程文件使用 curl or wget")])])]),t("li",[t("p",[e._v("ENV [设置环境变量申明常亮]")]),t("ul",[t("li",[e._v('ENV MYSQL_VER 5.6  RUN apt-get install -y mysql-server="${mysql_ver}"')]),t("li",[e._v("尽量使用")])])]),t("li",[t("p",[e._v("VOLUME [数据持久化相关]")])]),t("li",[t("p",[e._v("EXPOSE [暴露一个端口]")])]),t("li",[t("p",[e._v("CMD [设置容器启动后默认执行的命令和参数]")]),t("ul",[t("li",[e._v("可能被忽略，在被 -it 执行的时候")])])]),t("li",[t("p",[e._v("ENTRYPOINT [设置容器启动时执行的命令，让容器以应用程序或者服务的的形式运行，一定会被执行]")]),t("ul",[t("li",[e._v('ENTRYPOINT ["docker-entrypoint.sh"]')])])])]),t("blockquote",[t("p",[e._v("image 运行时 debug 【就是进入 container 内部】")])]),t("ul",[t("li",[e._v("docker run -it xxxxx")])]),t("h3",{attrs:{id:"docker-的-github-hub-docker-传送门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-的-github-hub-docker-传送门","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 的 GitHub -- hub.docker "),t("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门")])]),t("blockquote",[t("p",[e._v("一个官方用来存个人或者官方 image 的地方")])]),t("ul",[t("li",[e._v("登录： docker login")]),t("li",[e._v("个人的镜像必须以 docker 的用户名id命名 e.g：ljz126")]),t("li",[e._v("docker push ljz126/hello:[tag]")])]),t("h3",{attrs:{id:"手撸一个简单的-node-服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手撸一个简单的-node-服务","aria-hidden":"true"}},[e._v("#")]),e._v(" 手撸一个简单的 node 服务")]),t("ul",[t("li",[e._v("新建一个目录 "),t("code",[e._v("node-hello")])]),t("li",[e._v("进入到目录中 "),t("code",[e._v("vim app.js")])]),t("li",[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var http = require(\"http\");\n//设置主机名\nvar hostName = '0.0.0.0';\n//设置端口\nvar port = 8080;\n//创建服务\nvar server = http.createServer(function(req,res){\n    res.setHeader('Content-Type','text/plain');\n    res.end(\"hello nodejs\");\n\n});\nserver.listen(port,hostName,function(){\n    console.log(`服务器运行在http://${hostName}:${port}`);\n});\n")])])]),t("li",[e._v("新建 Dockerfile "),t("code",[e._v("vim Dockerfile")])]),t("li",[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('FROM node:4.6\nLABEL container="jiazhi"\nCOPY app.js /app/\nWORKDIR /app\nCMD node app.js\nexport 8080 #让端口可以在 docker 外访问\n')])])]),t("li",[e._v("docker build -t jz/node-hello .")]),t("li",[e._v("docker run -d jz/node-hello -p 8080:8080")]),t("li",[e._v("docker ps -a")])]),t("h3",{attrs:{id:"docker-网络处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-网络处理","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 网络处理")]),t("blockquote",[t("p",[e._v("每次 docker 创建一个 container 的时候，会给每个 container 分配独立的 network linux Base，而且相互之前可以 ping 通")])]),t("ul",[t("li",[e._v("查看当前docker链接情况： docker network ls ===> bridge host none")])]),t("h4",{attrs:{id:"通过-docker-run-起的两个-容器-的网络情况说明-【bridge】"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过-docker-run-起的两个-容器-的网络情况说明-【bridge】","aria-hidden":"true"}},[e._v("#")]),e._v(" 通过 docker run 起的两个 容器 的网络情况说明 【bridge】")]),t("p",[t("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1539351828567.png",alt:"image"}})]),t("ul",[t("li",[e._v("查看网络 bridge 情况： brctl show")]),t("li",[e._v("容器间的link："),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 假设有 两个 mongo 和 app 的 image\ndocker run -d --name mongo mongo\ndocker run -d --name mongo --link mongo app 【相当于在 app 里面的设置了 dns mongo --\x3e mongo 的 ip】\n")])])]),t("li",[e._v("创建一个自己的 bridge 并连接：\n"),t("ul",[t("li",[e._v("docker network create my-bridge")]),t("li",[e._v("docker run -d --network my-bridge --name mongo mongo")])])]),t("li",[e._v("端口映射 docker 对外提供一个服务\n"),t("ul",[t("li",[e._v("docker run -p 8080:8080 -d --name nginx nginx")])])])]),t("h4",{attrs:{id:"通过-docker-run-network-none-host-起容器的网络情况说明【none-host】"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过-docker-run-network-none-host-起容器的网络情况说明【none-host】","aria-hidden":"true"}},[e._v("#")]),e._v(" 通过 docker run --network none/host 起容器的网络情况说明【none/host】")]),t("p",[t("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1539414765240.png",alt:"image"}})]),t("h4",{attrs:{id:"实例演示-一个-python-docker-程序去链接一个-redis-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例演示-一个-python-docker-程序去链接一个-redis-docker","aria-hidden":"true"}},[e._v("#")]),e._v(" 实例演示 一个 python-docker 程序去链接一个 redis-docker")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker run -d --name redis redis\ndocker run -d -p 5000:5000 --link redis --name py -e REDIS_HOST=redis py\n\n// 问题来了 如果两个服务是在不同的服务器上呢\n参考：[VXLAN](https://cizixs.com/2017/09/25/vxlan-protocol-introduction/) && 分布式存储工具 [etcd](https://www.hi-linux.com/posts/40915.html)\n")])]),t("h3",{attrs:{id:"docker-数据持久化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-数据持久化","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 数据持久化")]),t("blockquote",[t("p",[e._v("因为 docker 产生的数据只存储在 docker container 本身，所以当一个 container 被 stop 而且 rm 的时候，数据就会随之消失")])]),t("ul",[t("li",[t("p",[e._v("生产")]),t("ul",[t("li",[t("code",[e._v("/var/lib/mysql")]),e._v(" 为 Dockerfile 的 VOLUME 的值\n"),t("code",[e._v("docker run -d -v mysql:[VOLUME] --name masql1 -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql")])])])]),t("li",[t("p",[e._v("开发")]),t("ul",[t("li",[e._v("同一个文件 就是 docker 里面实际运行的 WORKDIR 就是 -v 后面的文件夹\n"),t("code",[e._v("docker run -d -v $(pwd):[WORKDIR] --name masql1 mysql")])])])])]),t("h3",{attrs:{id:"docker-管理编排监控工具-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-管理编排监控工具-区别","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 管理编排监控工具 "),t("a",{attrs:{href:"https://blog.csdn.net/notsaltedfish/article/details/80959913",target:"_blank",rel:"noopener noreferrer"}},[e._v("区别")])]),t("h4",{attrs:{id:"docker-批量管理-docker-compose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-批量管理-docker-compose","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 批量管理 --- docker compose")]),t("h4",{attrs:{id:"docker-集群编排工具-一-k8s"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-集群编排工具-一-k8s","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 集群编排工具 一 --- k8s")]),t("h4",{attrs:{id:"docker-集群编排工具-二-docker-swarm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-集群编排工具-二-docker-swarm","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 集群编排工具 二 --- docker swarm")]),t("h4",{attrs:{id:"docker-运维和监控-heapster-grafana-influxdb-elk-fluentd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-运维和监控-heapster-grafana-influxdb-elk-fluentd","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 运维和监控 --- Heapster + Grafana + InfluxDB + ELK + Fluentd")]),t("h3",{attrs:{id:"docker-实用指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-实用指令","aria-hidden":"true"}},[e._v("#")]),e._v(" docker 实用指令")]),t("ul",[t("li",[t("p",[t("code",[e._v("docker exec -it dockerid xxxxx[命令]")]),e._v(" --在docker内部执行linux指令")])]),t("li",[t("p",[t("code",[e._v("doicker rm $(docker ps -aq)")]),e._v(" -- 清除所有已经停止的 docker")])]),t("li",[t("p",[t("code",[e._v("docker run -d --name=demo dockeImage")]),e._v(" -- 给docker命名")])]),t("li",[t("p",[t("code",[e._v("docker rm -f demo")]),e._v(" --强制关闭运行中的docker")])]),t("li",[t("p",[t("code",[e._v("docker stop demo")])])]),t("li",[t("p",[t("code",[e._v("docker start demo")])])]),t("li",[t("p",[t("code",[e._v("docker rm demo")])])]),t("li",[t("p",[t("code",[e._v("docker inspect docker dockerId")]),e._v(" -- 查看docker的详细信息")])]),t("li",[t("p",[t("code",[e._v("docker log dockerId")]),e._v(" --进入docker的log")])])]),t("hr"),t("h3",{attrs:{id:"实战实践-基于-gitlab-的-docker-持续集成以及持续构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实战实践-基于-gitlab-的-docker-持续集成以及持续构建","aria-hidden":"true"}},[e._v("#")]),e._v(" 实战实践 --- 基于 gitlab 的 docker 持续集成以及持续构建")]),t("blockquote",[t("p",[e._v("使用 vue-cli 进行构建，发布的话把 build 好的目录加上项目名称发到另外的服务器上，另外的服务器通过 nginx 处理静态文件")])]),t("ul",[t("li",[t("p",[e._v("怎么安装 Gitlab "),t("a",{attrs:{href:"https://www.gitlab.com.cn/installation/#centos-7",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门")]),e._v(" 记住 最好用 8g 内存的来安装这个 不然好卡的")])]),t("li",[t("p",[e._v("怎么安装 GitLab-runner  "),t("a",{attrs:{href:"https://segmentfault.com/a/1190000007180257",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门")])])])]),t("blockquote",[t("p",[e._v("值得一提的是 gitlab-runner 不需要和 gitlab 处于同一个服务器，可以试另外的机器甚至是本地虚拟机")])]),t("ul",[t("li",[e._v("可以修改gitlab配置文件 "),t("code",[e._v("vim /etc/gitlab/gitlab.rb")]),e._v(" && "),t("code",[e._v("gitlab-ctl reconfigure")]),e._v("（gitlab安装了并不会自动 running 要执行这个）")])]),t("h4",{attrs:{id:"准备工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备工作","aria-hidden":"true"}},[e._v("#")]),e._v(" 准备工作")]),t("ul",[t("li",[e._v("本地制作 vue-cli 的 docker image")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('>> Dockerfile\nFROM node:8.11\nLABEL container="jiazhi"\n# 主要安装你的构建工具\nRUN npm install -g @vue/cli\n# 一些其他依赖 这个视工具而定\nRUN npm i -g @vue/cli-plugin-babel\nRUN npm i -g @vue/cli-plugin-eslint\nRUN npm i -g @vue/cli-service\nRUN npm i -g vue-template-compiler\nCMD echo vue-cli up\n\n>> 执行指令 docker build -t vue .\n\n')])]),t("blockquote",[t("p",[e._v("先普及一波 "),t("a",{attrs:{href:"https://docs.gitlab.com/runner/",target:"_blank",rel:"noopener noreferrer"}},[e._v("gitlab-runner")])])]),t("ul",[t("li",[t("p",[e._v("runner分类")]),t("ul",[t("li",[e._v("share-runner 这种 runner 可以给所有项目使用，但是要以管理员身份登录 gitlab 查看")]),t("li",[e._v("project-runner 只能给当前项目使用，其他项目需要去 runner ci 的配置里面启用\n"),t("img",{attrs:{src:"https://makefriends.bs2dl.yy.com/bm1539398577470.png",alt:"image"}})])])]),t("li",[t("p",[e._v("runner 配置")])])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("gitlab-ci-multi-runner register\n// 输入 gitlab 地址\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )\n》上图1\nPlease enter the gitlab-ci token for this runner\n》上图2\nPlease enter the gitlab-ci description for this runner\nmy-runner\nINFO[0034] fcf5c619 Registering runner... succeeded\nPlease enter the executor: shell, docker, docker-ssh, ssh?\ndocker\nPlease enter the Docker image (eg. ruby:2.1):\nvue\nINFO[0037] Runner registered successfully. Feel free to start it, but if it's\nrunning already the config should be automatically reloaded!\n\n>> 成功创建 runner 一个\n")])]),t("p",[e._v("一步到位")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('gitlab-runner register \\\n  --non-interactive \\\n  --url "http://gitlab.levii.cn/" \\\n  --registration-token "7mcMLfT1heLQmhrgF9FF" \\\n  --executor "docker" \\\n  --docker-image fev \\\n  --description "fev" \\\n  --tag-list "fev" \\\n  --run-untagged \\\n  --locked="false" \\\n  # 下面这个要是不行就要手动改配置文件哦 主要是设置 bash 的目录，npm g 的全局命令装在 bash 里面呢\n  --env="["BASH_ENV=~/.bashrc", "FORCE_COLOR=1"]" \\\n  --docker-pull-policy="if-not-present"\n')])]),t("ul",[t("li",[e._v("修改 runner "),t("a",{attrs:{href:"https://docs.gitlab.com/runner/configuration/advanced-configuration.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("配置")]),t("code",[e._v("vim /etc/gitlab-runner/config.toml")]),e._v("，runner 默认是去 docker hub 上拉取 image 的 真恶心")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('concurrent = 1\ncheck_interval = 0\n\n[[runners]]\n  name = "docker-host"\n  url = "http://gitlab.docker.com/"\n  token = "ce6744ffcdab965485f3646d4e1009"\n  executor = "shell"\n  [runners.cache]\n\n[[runners]]\n  name = "docker-host"\n  url = "http://gitlab.docker.com/"\n  token = "56aa96e7179179e77efc1dd1cc610e"\n  executor = "docker"\n  [runners.docker]\n    tls_verify = false\n    image = "vue"\n    privileged = false\n    disable_cache = false\n    volumes = ["/cache"]\n    # 虚拟机的话 要加上这个 不然 gitlab.docker.com 是找不到 ip 的，除非你自己另外起一个 nds server 直接这样就好了\n    extra_hosts = ["gitlab.docker.com:192.168.205.10"]\n    # 最主要是下面这个啦 如果本地有就在本地拿否则就去hub上拿\n    pull_policy = "if-not-present"\n    shm_size = 0\n  [runners.cache]\n\n[[runners]]\n  name = "docker-host"\n  url = "http://gitlab.docker.com/"\n  token = "a5e63806dfa5cedc7281014b359fb7"\n  executor = "docker"\n  [runners.docker]\n    tls_verify = false\n    image = "alpine:latest"\n    privileged = false\n    disable_cache = false\n    volumes = ["/cache"]\n    shm_size = 0\n    pull_policy = "if-not-present"\n    extra_hosts = ["gitlab.docker.com:192.168.205.10"]\n  [runners.cache]\n\n')])]),t("ul",[t("li",[e._v("配置 "),t("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/yaml/",target:"_blank",rel:"noopener noreferrer"}},[e._v(".gitlab-ci.yml")])])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 定义两个流程 构建和发布\nstages:\n  - build\n  - deploy\n\n# build 流程\nbuild:\n  stage: build\n  # 指定哪个 runner 作为构建\n  tags:\n    - vue\n  # 创建工件 就是保存哪些目录或文件到runner的运行目录下\n  artifacts:\n    expire_in: 1 week\n    paths:\n    - dist/\n  # 前置脚本\n  before_script:\n    - echo 我是前置脚本\n  # 执行脚本\n  script:\n    # gitlab 常量 获取项目名称 [其他](https://docs.gitlab.com/ce/ci/variables/README.html)\n    - echo $CI_PROJECT_NAME\n    - vue --version\n    - pwd\n    - npm i\n    - npm run build\n  # 后置脚本\n  after_script:\n    - git log -1 --pretty=medium >> gitlog\n  # 指定哪个分支可以运行本流程\n  only:\n    - master\n\n# 发布流程\ndeploy:\n  stage: deploy\n  # 这里就直接用另外的 runner 在注册 runner 的时候选 shell 的，也可以用 vue 这个 runner 但是纯脚本的用 shell 超快的\n  tags:\n    - sh\n  variables:\n    GIT_STRATEGY: none\n  before_script:\n    - pwd\n    - ls -a\n  # 发布就是直接 -- 自己看吧 相信可以看懂的\n  # 两台 linux 的文件互传需要密码 先在 runner 的机器上切换用户 su gitlab-runner 然后设置信任实现免密[最下的链接有]\n  # 这一步我搞了好久 因为没认识到要切换用户，用 sudo 去跑也要输入密码，在 runner 中我们没办法输入\n  script:\n    - if [ -d $CI_PROJECT_NAME ]; then\n    - rm -rf $CI_PROJECT_NAME\n    - fi\n    - mkdir $CI_PROJECT_NAME\n    - mv ./dist/* $CI_PROJECT_NAME\n    - rsync -avz ./$CI_PROJECT_NAME root@192.168.205.26:/usr/share/nginx/html/www\n  environment:\n    name: master\n  allow_failure: false\n  only:\n    - master\n")])]),t("ul",[t("li",[e._v("好了 大功告成 修改文件 --\x3e push 最后看看我linux nginx 的配置")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('user  nginx;\nworker_processes  1;\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n    server\n  {\n    listen 80;#监听端口\n    server_name www.nginx.net;#域名\n    index index.html index.htm index.php;\n    root /usr/share/nginx/html/www;#站点目录\n    access_log off;\n    location ^~ /a/ {\n        alias /usr/share/nginx/html/www/;\n    }\n  }\n    include /etc/nginx/conf.d/*.conf;\n}\n')])]),t("ul",[t("li",[e._v("怎么设置 gitlab page\n"),t("ul",[t("li",[t("code",[e._v("vim /etc/gitlab/gitlab.rb")]),e._v(" --\x3e /gitlab_pages['enable'] vim 搜索功能")]),t("li",[e._v("找到 "),t("code",[e._v("gitlab_pages['enable'] = false")]),e._v(" 并设置为 true 即可 其他别动")]),t("li",[t("code",[e._v("gitlab-ctl reconfigure")])])])])]),t("hr"),t("h4",{attrs:{id:"参考链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考链接")]),t("ul",[t("li",[t("a",{attrs:{href:"http://dockone.io/article/783",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker image Container 的区别")])]),t("li",[t("a",{attrs:{href:"http://www.runoob.com/docker/docker-command-manual.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker命令大全")])]),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/enhancing/article/details/12836437",target:"_blank",rel:"noopener noreferrer"}},[e._v("简化linux指令")])]),t("li",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000006233614",target:"_blank",rel:"noopener noreferrer"}},[e._v("centos 图形化")])]),t("li",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/43212685",target:"_blank",rel:"noopener noreferrer"}},[e._v("ip地址")])]),t("li",[t("a",{attrs:{href:"https://my.oschina.net/Sheamus/blog/612059",target:"_blank",rel:"noopener noreferrer"}},[e._v("ifconfig")])]),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/7d3f3fa056e8",target:"_blank",rel:"noopener noreferrer"}},[e._v("centos 安装 node")])]),t("li",[t("a",{attrs:{href:"https://www.gitlab.com.cn/installation/#centos-7",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装 gitlab")])]),t("li",[t("a",{attrs:{href:"https://jingyan.baidu.com/article/5552ef47f509bd518ffbc933.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("处理centos防火墙")])]),t("li",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000007180257",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装 注册 gitlab runner")])]),t("li",[t("a",{attrs:{href:"https://docs.gitlab.com/runner/install/linux-repository.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装 gitlab runner 官方")])]),t("li",[t("a",{attrs:{href:"https://docs.gitlab.com/runner/register/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("注册 gitlab runner 官方")])]),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/YuZhiHui_No1/article/details/44564963",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux进程前后台切换")])]),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/2b7e73b0a096",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用本地docker镜像")])]),t("li",[t("a",{attrs:{href:"https://gitlab.com/gitlab-org/gitlab-runner/issues/1036",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用虚拟机runner host error")])]),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/e3a2a1376ca9",target:"_blank",rel:"noopener noreferrer"}},[e._v("linux安装dns server")])]),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/2b43151fb92e",target:"_blank",rel:"noopener noreferrer"}},[e._v("创建 share-runner ")])]),t("li",[t("a",{attrs:{href:"https://tech.upyun.com/article/246/%E5%BD%93%E8%B0%88%E5%88%B0%20GitLab%20CI%20%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%88%91%E4%BB%AC%E9%83%BD%E8%AF%A5%E8%81%8A%E4%BA%9B%E4%BB%80%E4%B9%88%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ci原理浅析")])]),t("li",[t("a",{attrs:{href:"http://www.weiruoyu.cn/?p=669",target:"_blank",rel:"noopener noreferrer"}},[e._v("远程文件拷贝")])]),t("li",[t("a",{attrs:{href:"http://www.voidcn.com/article/p-fhdkkcov-bgb.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("权限ssh权限问题")])]),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/nfer_zhuang/article/details/42646849",target:"_blank",rel:"noopener noreferrer"}},[e._v("两台linux怎么免密传输文件")])]),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/s_sunnyy/article/details/79093646",target:"_blank",rel:"noopener noreferrer"}},[e._v("inux远程执行shell文件")])]),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/u012486840/article/details/52610320",target:"_blank",rel:"noopener noreferrer"}},[e._v("CentOS 7 yum 安装 Nginx")])]),t("li",[t("a",{attrs:{href:"https://www.cnyunwei.cc/archives/1204",target:"_blank",rel:"noopener noreferrer"}},[e._v("gitlab操作")])])])])}],!1,null,null,null);r.default=a.exports}}]);